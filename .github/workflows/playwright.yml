name: 🎭 Playwright Tests CI

on:
  push:
    branches: [master, main]
  pull_request:
    branches: [master, main]
  schedule:
    - cron: '0 5 * * *' # Runs at 5 AM UTC (6 AM UK time during GMT)
  workflow_dispatch:

jobs:
  test:
    timeout-minutes: 60
    runs-on: ubuntu-latest
    permissions:
      contents: read
      issues: write

    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4

      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18
          cache: 'npm'

      - name: 📦 Install dependencies
        run: npm ci

      - name: 🎭 Install Playwright Browsers
        run: npx playwright install --with-deps

      - name: 🧪 Run Playwright tests
        run: npx playwright test
        env:
          CI: true

      - name: 📊 Upload Playwright Report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: playwright-report
          path: playwright-report/
          retention-days: 30

      - name: 📸 Upload test screenshots and videos
        uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: test-failures
          path: test-results/
          retention-days: 7

      - name: � Test Results Summary
        if: always()
        run: |
          echo "## 🎭 Playwright Test Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          # Check if test results exist
          if [ -f "test-results/results.json" ]; then
            echo "### 📊 Test Summary" >> $GITHUB_STEP_SUMMARY
            # Parse test results if jq is available
            if command -v jq &> /dev/null; then
              EXPECTED=$(jq '.stats.expected' test-results/results.json 2>/dev/null || echo "0")
              UNEXPECTED=$(jq '.stats.unexpected' test-results/results.json 2>/dev/null || echo "0")
              SKIPPED=$(jq '.stats.skipped' test-results/results.json 2>/dev/null || echo "0")
              FLAKY=$(jq '.stats.flaky' test-results/results.json 2>/dev/null || echo "0")
              
              # Calculate total (expected + unexpected + skipped + flaky)
              if [[ "$EXPECTED" =~ ^[0-9]+$ ]] && [[ "$UNEXPECTED" =~ ^[0-9]+$ ]] && [[ "$SKIPPED" =~ ^[0-9]+$ ]] && [[ "$FLAKY" =~ ^[0-9]+$ ]]; then
                TOTAL=$((EXPECTED + UNEXPECTED + SKIPPED + FLAKY))
              else
                TOTAL="N/A"
              fi
              echo "- Total tests: $TOTAL" >> $GITHUB_STEP_SUMMARY
              echo "- Passed: ✅ $EXPECTED" >> $GITHUB_STEP_SUMMARY
              echo "- Failed: ❌ $UNEXPECTED" >> $GITHUB_STEP_SUMMARY
              echo "- Skipped: ⏭️ $SKIPPED" >> $GITHUB_STEP_SUMMARY
              if [ "$FLAKY" != "0" ]; then
                echo "- Flaky: 🔄 $FLAKY" >> $GITHUB_STEP_SUMMARY
              fi
            fi
          fi

          if [ -f "playwright-report/index.html" ]; then
            echo "✅ Test report generated successfully" >> $GITHUB_STEP_SUMMARY
            echo "📊 View detailed results in the uploaded artifacts" >> $GITHUB_STEP_SUMMARY
          else
            echo "⚠️ Test report not found" >> $GITHUB_STEP_SUMMARY
          fi

          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🚀 Application Info" >> $GITHUB_STEP_SUMMARY
          echo "- Server URL: http://localhost:3000" >> $GITHUB_STEP_SUMMARY
          echo "- Test Environment: CI (Ubuntu)" >> $GITHUB_STEP_SUMMARY
          echo "- Browser: Chrome (Desktop)" >> $GITHUB_STEP_SUMMARY

      - name: 📊 Parse Test Results for Email
        # if: github.event_name == 'schedule'
        id: test-results
        run: |
          # Parse test results for email notification
          if [ -f "test-results/results.json" ]; then
            EXPECTED=$(jq '.stats.expected' test-results/results.json 2>/dev/null || echo "0")
            UNEXPECTED=$(jq '.stats.unexpected' test-results/results.json 2>/dev/null || echo "0")
            SKIPPED=$(jq '.stats.skipped' test-results/results.json 2>/dev/null || echo "0")
            FLAKY=$(jq '.stats.flaky' test-results/results.json 2>/dev/null || echo "0")
            TOTAL=$((EXPECTED + UNEXPECTED + SKIPPED + FLAKY))
            
            echo "total=${TOTAL}" >> $GITHUB_OUTPUT
            echo "passed=${EXPECTED}" >> $GITHUB_OUTPUT
            echo "failed=${UNEXPECTED}" >> $GITHUB_OUTPUT
            echo "skipped=${SKIPPED}" >> $GITHUB_OUTPUT
            echo "flaky=${FLAKY}" >> $GITHUB_OUTPUT
            
            # Determine status
            if [ "$UNEXPECTED" = "0" ]; then
              echo "status=✅ PASSED" >> $GITHUB_OUTPUT
              echo "status_color=green" >> $GITHUB_OUTPUT
            else
              echo "status=❌ FAILED" >> $GITHUB_OUTPUT
              echo "status_color=red" >> $GITHUB_OUTPUT
            fi
          else
            echo "status=⚠️ NO RESULTS" >> $GITHUB_OUTPUT
            echo "status_color=orange" >> $GITHUB_OUTPUT
            echo "total=0" >> $GITHUB_OUTPUT
            echo "passed=0" >> $GITHUB_OUTPUT
            echo "failed=0" >> $GITHUB_OUTPUT
            echo "skipped=0" >> $GITHUB_OUTPUT
            echo "flaky=0" >> $GITHUB_OUTPUT
          fi

      - name: 📧 Send GitHub Notification
        # if: github.event_name == 'schedule'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');

            // Get test results
            const total = '${{ steps.test-results.outputs.total }}';
            const passed = '${{ steps.test-results.outputs.passed }}';
            const failed = '${{ steps.test-results.outputs.failed }}';
            const skipped = '${{ steps.test-results.outputs.skipped }}';
            const flaky = '${{ steps.test-results.outputs.flaky }}';
            const status = '${{ steps.test-results.outputs.status }}';

            // Create issue title and body
            const title = `🎭 Daily Test Results - ${status} (${new Date().toDateString()})`;

            const body = `## 🎭 Daily Playwright Test Results

            **Status:** ${status}
            **Repository:** ${{ github.repository }}
            **Run ID:** ${{ github.run_id }}
            **Date:** ${new Date().toISOString()}

            ### 📊 Test Statistics
            - 📝 **Total Tests:** ${total}
            - ✅ **Passed:** ${passed}
            - ❌ **Failed:** ${failed}
            - ⏭️ **Skipped:** ${skipped}
            - 🔄 **Flaky:** ${flaky}

            ### 🔗 Quick Links
            - [View Full Results](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})
            - [Download Reports & Screenshots](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}/artifacts)

            ### 📋 Summary
            ${failed === '0' ? '🎉 All tests passed successfully!' : '⚠️ Some tests failed. Please review the results.'}

            ---
            *Automated daily test run - 6 AM UK time*`;

            // Create an issue for the test results
            await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: title,
              body: body,
              labels: ['test-results', 'automated', failed === '0' ? 'passed' : 'failed']
            });

            console.log('GitHub issue created with test results');

      - name: 📧 Notify Email Recipients
        # if: github.event_name == 'schedule' && vars.EMAIL_RECIPIENTS
        run: |
          echo "📧 Email notifications would be sent to: ${{ vars.EMAIL_RECIPIENTS }}"
          echo "🔗 Instead, check the GitHub issue created above for test results"
          echo "💡 You can subscribe to repository notifications to get emails for new issues"
